{"version":3,"sources":["Components/Cards/Cards.js","API/api.js","Components/Charts/Charts.js","Components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","start","end","value","duration","separator","Date","toDateString","API_URL","fetchData","country","a","selectedCountryUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchDailyApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","aria-label","onChange","e","target","i","key","App","props","fetchedCountryData","setState","state","fetchedData","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAmEeA,EAhEA,SAAC,GAA4D,IAAD,IAAzDC,KAASC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,WAErD,OAAIH,EAIA,yBAAKI,UAAU,yCACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,mCACX,wBAAIA,UAAU,cAAd,YACA,uBAAGA,UAAU,aACT,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKN,EAAUO,MACfC,SAAU,IACVC,UAAU,OAGlB,uBAAGL,UAAU,aAAb,8CAEJ,yBAAKA,UAAU,eACX,2BAAOA,UAAU,eAAjB,gBAA6C,IAAIM,KAAKP,GAAYQ,mBAI9E,yBAAKP,UAAU,OACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,mCACX,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAb,IAA0B,kBAAC,IAAD,CAClBC,MAAO,EACPC,IAAKL,EAAUM,MACfC,SAAU,IACVC,UAAU,OAElB,uBAAGL,UAAU,aAAb,iDAEJ,yBAAKA,UAAU,eACX,2BAAOA,UAAU,eAAjB,gBAA6C,IAAIM,KAAKP,GAAYQ,mBAI9E,yBAAKP,UAAU,OACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,kCACX,wBAAIA,UAAU,cAAd,SACA,uBAAGA,UAAU,aAAb,IAA0B,kBAAC,IAAD,CAClBC,MAAO,EACPC,IAAKJ,EAAOK,MACZC,SAAU,IACVC,UAAU,OAElB,uBAAGL,UAAU,aAAb,6CAEJ,yBAAKA,UAAU,eACX,2BAAOA,UAAU,eAAjB,gBAA6C,IAAIM,KAAKP,GAAYQ,oBArD3E,kB,iCCJTC,EAAU,iCAEHC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAqBJ,EAEtBE,IACCE,EAAkB,UAAMJ,EAAN,sBAA2BE,IAJ5B,kBASoDG,IAAMC,IAAIF,GAT9D,2BASTjB,KAAQC,EATC,EASDA,UAAWC,EATV,EASUA,UAAWC,EATrB,EASqBA,OAAQC,EAT7B,EAS6BA,WAT7B,kBAaV,CAAEH,YAAWC,YAAWC,SAAQC,eAbtB,kCAgBjBgB,QAAQC,IAAR,MAhBiB,0DAAH,sDAsBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEdb,EAFc,EAEdA,KAEFuB,EAAevB,EAAKwB,KAAI,SAACC,GAAD,MAAgB,CAC1CxB,UAAWwB,EAAUxB,UAAUyB,MAC/BvB,OAAQsB,EAAUtB,OAAOuB,MACzBC,KAAMF,EAAUG,eAPE,kBAUfL,GAVe,yFAAH,qDAkBdM,EAAc,uCAAG,8BAAAb,EAAA,+EAEcE,IAAMC,IAAN,UAAaN,EAAb,eAFd,uBAEPiB,EAFO,EAEf9B,KAAQ8B,UAFO,kBAGfA,EAAUN,KAAK,SAACT,GAAD,OAAaA,EAAQgB,SAHrB,yFAAH,qDCuCZC,EA7EA,SAAC,GAAwD,IAAD,IAArDhC,KAAOC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAUY,EAAc,EAAdA,QAAc,EACjCkB,mBAAS,IADwB,mBAC5DR,EAD4D,KACjDS,EADiD,KAGnEC,qBAAW,YACY,uCAAG,sBAAAnB,EAAA,kEAClBkB,EADkB,SACEZ,IADF,6EAAH,qDAInBc,KAED,IAEH,IAAMC,EACFZ,EAAUa,OAEN,kBAAC,OAAD,CAAMtC,KACF,CACIuC,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CACN,CACIxC,KAAMyB,EAAUD,KAAI,qBAAGvB,aACvBwC,MAAO,qBACPC,YAAa,UACbC,MAAM,GAEV,CACI3C,KAAMyB,EAAUD,KAAI,qBAAGrB,UACvBsC,MAAO,gBACPC,YAAa,MACbE,gBAAiB,kBACjBD,MAAM,OAMxB,KAGAE,EACF5C,EAEQ,kBAAC,MAAD,CACID,KAAM,CACFuC,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CACb,sBACA,sBACA,uBAEJ5C,KAAM,CAACC,EAAUO,MAAON,EAAUM,MAAOL,EAAOK,UAGxDsC,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,qBAAD,OAAuBnC,OAI7D,KAGV,OACI,yBAAKV,UAAU,OACX,yBAAKA,UAAU,YACTU,EAAU8B,EAAWR,KCtCxBc,EA/BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EAEGnB,mBAAS,IAFZ,mBAEvCoB,EAFuC,KAErBC,EAFqB,KAY/C,OARAnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACczB,IADd,6EAAH,qDAId0B,KACD,CAACD,IAGA,yBAAKjD,UAAU,+CACX,wBAAIA,UAAU,eAAd,WACA,yBAAKA,UAAU,YACX,8BACI,4BAAQA,UAAU,cAAcmD,aAAW,yBAAyBC,SAAU,SAACC,GAAD,OAAON,EAAoBM,EAAEC,OAAOnD,SAC9G,4BAAQA,MAAM,IAAd,UACE6C,EAAiB7B,KAAK,SAACT,EAAS6C,GAAV,OAAgB,4BAAQC,IAAKD,EAAGpD,MAAOO,GAAUA,WC6BlF+C,E,kDA5CX,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAcVX,oBAfoB,uCAeE,WAAOrC,GAAP,eAAAC,EAAA,sEAGaF,EAAUC,GAHvB,OAGdiD,EAHc,OAIpB5C,QAAQC,IAAI2C,GAGZ,EAAKC,SAAS,CAAEjE,KAAMgE,EAAoBjD,QAASA,IAP/B,2CAfF,sDAGhB,EAAKmD,MAAQ,CACXlE,KAAM,GACNe,QAAS,IALK,E,gMAWQD,I,OAApBqD,E,OACNC,KAAKH,SAAS,CAAEjE,KAAOmE,I,qIAahB,IAAD,EACoBC,KAAKF,MAAvBlE,EADF,EACEA,KAAMe,EADR,EACQA,QACd,OACE,yBAAKV,UAAU,mBACb,yBAAKA,UAAU,OACb,4BAAQA,UAAU,kBAChB,wBAAIA,UAAU,yBAAd,oBAGJ,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOL,KAAOA,IACd,kBAAC,EAAD,CAAeoD,oBAAqBgB,KAAKhB,sBACzC,kBAAC,EAAD,CAAQpD,KAAMA,EAAMe,QAASA,U,GAvCrBsD,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,a","file":"static/js/main.734fe572.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\n const Cards = ({ data : { confirmed, recovered, deaths, lastUpdate }}) => {\r\n\r\n    if(!confirmed){\r\n        return 'Loading ......'\r\n    }\r\n    return (\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4 mt-1\">\r\n            <div className=\"col\">\r\n                <div className=\"card text-center\">\r\n                    <div className=\"card-body bg-primary text-light\">\r\n                        <h5 className=\"card-title\">Infected</h5>\r\n                        <p className=\"card-text\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </p>\r\n                        <p className=\"card-text\">Number of active cases of COVID-19 so far</p>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                        <small className=\"text-muted \">Last updated {new Date(lastUpdate).toDateString()}</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col\">\r\n                <div className=\"card text-center\">\r\n                    <div className=\"card-body bg-success text-light\">\r\n                        <h5 className=\"card-title\">Recovered</h5>\r\n                        <p className=\"card-text\"> <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            /></p>\r\n                        <p className=\"card-text\">Number of recovered cases of COVID-19 so far</p>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                        <small className=\"text-muted \">Last updated {new Date(lastUpdate).toDateString()}</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col\">\r\n                <div className=\"card text-center\">\r\n                    <div className=\"card-body bg-danger text-light\">\r\n                        <h5 className=\"card-title\">Death</h5>\r\n                        <p className=\"card-text\"> <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            /></p>\r\n                        <p className=\"card-text\">Number of death cases of COVID-19 so far</p>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                        <small className=\"text-muted \">Last updated {new Date(lastUpdate).toDateString()}</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst API_URL = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let selectedCountryUrl = API_URL;\r\n\r\n    if(country){\r\n        selectedCountryUrl = `${API_URL}/countries/${country}`\r\n    }\r\n    try{\r\n        //we can straight return data like this from the response object. rather than data.confirmed and vice versa..\r\n\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(selectedCountryUrl);\r\n\r\n        //const modifiedData = { confirmed, recovered, deaths, lastUpdate }\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n\r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n//for daily data which we can use for charts\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const { data } = await axios.get(`${API_URL}/daily`);\r\n        // console.log(data)\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n//for country data..\r\n\r\nexport const fetchCountries = async () =>{\r\n    try {\r\n        const {data :{ countries }} = await axios.get(`${API_URL}/countries`)\r\n        return countries.map( (country )=> country.name )\r\n    } catch (error) {\r\n        \r\n    }\r\n} ","import React, { useState, useEffect } from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nimport { Line, Bar  } from 'react-chartjs-2';\r\nimport { fetchDailyData } from '../../API/api';\r\n\r\nconst Charts = ({ data:{ confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect( () =>{\r\n        const fetchDailyApi = async () =>{\r\n            setDailyData( await fetchDailyData());\r\n        }\r\n\r\n        fetchDailyApi();\r\n        \r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? \r\n        (\r\n            <Line data={ \r\n                {\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [\r\n                        {\r\n                            data: dailyData.map(({ confirmed }) => confirmed ),\r\n                            label: 'INFECTED TILL DATE',\r\n                            borderColor: '#3333ff',\r\n                            fill: true\r\n                        }, \r\n                        {\r\n                            data: dailyData.map(({ deaths }) => deaths ),\r\n                            label: 'DEATHS SO FAR',\r\n                            borderColor: 'red',\r\n                            backgroundColor: 'rgba(255, 0, 0)',\r\n                            fill: true\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        />)\r\n        : null     \r\n    );\r\n\r\n    const barChart = (\r\n        confirmed \r\n            ? (\r\n                <Bar \r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: [\r\n                                'rgba(0, 0, 255, 0.5',\r\n                                'rgba(0, 255, 0, 0.5',\r\n                                'rgba(255, 0, 0, 0.5',\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value ]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false},\r\n                        title: { display: true, text: ` Current State in ${country}`}\r\n                    }}\r\n                />\r\n            )\r\n            : null\r\n    )\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col mt-5\">\r\n                { country ? barChart : lineChart }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Charts.propTypes = {\r\n\r\n// }\r\n\r\nexport default Charts\r\n","import React, { useState, useEffect } from 'react'\r\n//import PropTypes from 'prop-types'\r\nimport { fetchCountries } from '../../API/api'\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries( await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries])\r\n    \r\n    return (\r\n        <div className=\"row d-flex justify-content-center mt-2 mb-2\">\r\n            <h3 className=\"text-center\">Country</h3>\r\n            <div className=\"col-md-8\">\r\n                <form>\r\n                    <select className=\"form-select\" aria-label=\"Default select example\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                        <option value=\"\">Global</option>\r\n                        { fetchedCountries.map( (country, i) => <option key={i} value={country}>{country}</option>)}\r\n                    </select>\r\n                </form>\r\n            </div>   \r\n        </div>\r\n    )\r\n}\r\n\r\n// Country.propTypes = {\r\n\r\n// }\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Cards, Charts, CountryPicker } from './Components';\r\nimport { fetchData } from './API/api';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n\r\n      this.state = {\r\n        data: {},\r\n        country: ''\r\n      }\r\n     \r\n    }\r\n\r\n  async componentDidMount (){\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data : fetchedData });\r\n  }\r\n  \r\n  handleCountryChange = async (country) => {\r\n\r\n    //fetch data\r\n    const fetchedCountryData = await fetchData(country);\r\n    console.log(fetchedCountryData)\r\n\r\n    //set the state..\r\n    this.setState({ data: fetchedCountryData, country: country })\r\n\r\n  }\r\n  render(){\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <header className=\"custom-element\">\r\n            <h1 className=\"display-1 text-center\">Covid Tracker </h1>\r\n          </header>\r\n        </div>\r\n        <div className=\"container\">\r\n          <Cards data={ data } />\r\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n          <Charts data={data} country={country} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './main.scss';\r\nimport 'bootstrap';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}